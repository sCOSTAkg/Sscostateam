{
  "id": "OQlecQ9yvPUhl6ZL",
  "name": "Tima",
  "nodes": [
    {
      "parameters": {
        "jsCode": "/**\n * MarkdownV2-safe formatter + auto-chunker for Telegram (n8n Code node)\n * --------------------------------------------------------------------\n * - Allows: *bold*, _italic_, ||spoiler||, [label](url)\n * - Escapes everything else for Telegram MarkdownV2\n * - Validates/normalizes URLs\n * - Converts \"# Heading\" lines to bold titles\n * - Splits long messages into <= 4096-char chunks (uses a 4000-char budget)\n * - Outputs one item per chunk so the Telegram node sends all parts\n *\n * Recommended: Run this node in \"Run Once for All Items\".\n */\n\nconst MAX_TELEGRAM = 4096;\nconst SAFE_BUDGET = 4000; // small margin to avoid edge overflows\n\n// ============ MarkdownV2 helpers ============\nfunction escapeMarkdownV2(text) {\n  if (!text) return '';\n  return String(text).replace(/([\\\\_*[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\nfunction escapeForUrl(url) {\n  return String(url).replace(/[)\\\\]/g, '\\\\$&');\n}\n\nfunction normalizeAndValidateUrl(url) {\n  let raw = String(url || '').trim();\n  try {\n    const u = new URL(raw);\n    return u.toString();\n  } catch {}\n  // Try https:// for bare domains\n  const domainLike = /^[a-z0-9.-]+\\.[a-z]{2,}([/:?#].*)?$/i.test(raw);\n  if (domainLike) {\n    try {\n      const u2 = new URL('https://' + raw);\n      return u2.toString();\n    } catch {}\n  }\n  return null;\n}\n\nfunction normalizeHeadings(text) {\n  // Turn \"# Title\" → \"*Title*\"\n  return text.replace(/^(#{1,6})\\s+(.*)$/gm, (m, hashes, title) => `*${title.trim()}*`);\n}\n\nfunction normalizeCommonMd(text) {\n  return String(text)\n    .replace(/\\*\\*([\\s\\S]*?)\\*\\*/g, '*$1*') // **bold** → *bold*\n    .replace(/__([\\s\\S]*?)__/g, '_$1_');    // __italic__ → _italic_\n}\n\n/**\n * Convert incoming text to Telegram-safe MarkdownV2.\n */\nfunction processMarkdownV2Safe(inputText) {\n  if (!inputText) return '';\n\n  let text = normalizeCommonMd(String(inputText));\n  text = normalizeHeadings(text);\n\n  const placeholders = { links: [], bolds: [], italics: [], spoilers: [] };\n\n  // Links: keep safe via placeholders during escaping\n  text = text.replace(/\\[([^\\]\\n]+)\\]\\(([^)]+)\\)/g, (m, label, url) => {\n    const normalizedUrl = normalizeAndValidateUrl(url);\n    if (!normalizedUrl) return escapeMarkdownV2(label);\n    const idx = placeholders.links.length;\n    const ph = `⟬L${idx}⟭`;\n    const safeLabel = escapeMarkdownV2(label);\n    const safeUrl = escapeForUrl(normalizedUrl);\n    placeholders.links.push(`[${safeLabel}](${safeUrl})`);\n    return ph;\n  });\n\n  // Bold\n  text = text.replace(/\\*([\\s\\S]+?)\\*/g, (m, inner) => {\n    const idx = placeholders.bolds.length;\n    const ph = `⟬B${idx}⟭`;\n    placeholders.bolds.push(`*${escapeMarkdownV2(inner)}*`);\n    return ph;\n  });\n\n  // Italic\n  text = text.replace(/_([\\s\\S]+?)_/g, (m, inner) => {\n    const idx = placeholders.italics.length;\n    const ph = `⟬I${idx}⟭`;\n    placeholders.italics.push(`_${escapeMarkdownV2(inner)}_`);\n    return ph;\n  });\n\n  // Spoilers\n  text = text.replace(/\\|\\|([\\s\\S]+?)\\|\\|/g, (m, inner) => {\n    const idx = placeholders.spoilers.length;\n    const ph = `⟬S${idx}⟭`;\n    placeholders.spoilers.push(`||${escapeMarkdownV2(inner)}||`);\n    return ph;\n  });\n\n  // Escape everything else\n  text = escapeMarkdownV2(text);\n\n  // Restore placeholders\n  placeholders.links.forEach((md, i) => { text = text.replace(`⟬L${i}⟭`, md); });\n  placeholders.bolds.forEach((md, i) => { text = text.replace(`⟬B${i}⟭`, md); });\n  placeholders.italics.forEach((md, i) => { text = text.replace(`⟬I${i}⟭`, md); });\n  placeholders.spoilers.forEach((md, i) => { text = text.replace(`⟬S${i}⟭`, md); });\n\n  return text;\n}\n\n// ============ Chunking helpers ============\n/**\n * Split text into Telegram-safe chunks <= maxLen.\n * Prefers paragraph boundaries, then sentence boundaries, then words.\n * Falls back to hard cuts only when unavoidable (e.g., extremely long URL).\n */\nfunction chunkForTelegram(text, maxLen = SAFE_BUDGET) {\n  if (!text || text.length <= maxLen) return [text || ''];\n\n  const parts = [];\n  let buffer = '';\n\n  const flush = () => {\n    if (buffer) {\n      parts.push(buffer);\n      buffer = '';\n    }\n  };\n\n  // 1) Paragraph-level packing\n  const paragraphs = text.split(/\\n{2,}/);\n  for (const pRaw of paragraphs) {\n    const p = pRaw; // keep paragraph as-is\n    const candidate = buffer ? buffer + '\\n\\n' + p : p;\n    if (candidate.length <= maxLen) {\n      buffer = candidate;\n      continue;\n    }\n    if (p.length <= maxLen) {\n      flush();\n      buffer = p;\n      continue;\n    }\n\n    // 2) Sentence-level packing (paragraph is still too big)\n    flush();\n    const sentences = p.split(/(?<=[.!?…])\\s+(?=[^\\s])/u);\n    let sBuf = '';\n    for (const s of sentences) {\n      const sCandidate = sBuf ? sBuf + ' ' + s : s;\n      if (sCandidate.length <= maxLen) {\n        sBuf = sCandidate;\n        continue;\n      }\n      if (s.length <= maxLen) {\n        if (sBuf) parts.push(sBuf);\n        sBuf = s;\n        continue;\n      }\n\n      // 3) Word-level packing (sentence is still too big)\n      if (sBuf) { parts.push(sBuf); sBuf = ''; }\n      let wBuf = '';\n      const words = s.split(/\\s+/);\n      for (const w of words) {\n        const wCandidate = wBuf ? wBuf + ' ' + w : w;\n        if (wCandidate.length <= maxLen) {\n          wBuf = wCandidate;\n          continue;\n        }\n        if (w.length <= maxLen) {\n          if (wBuf) parts.push(wBuf);\n          wBuf = w;\n          continue;\n        }\n        // 4) Hard split (extremely long token, e.g., massive URL)\n        if (wBuf) { parts.push(wBuf); wBuf = ''; }\n        const re = new RegExp(`.{1,${maxLen}}`, 'g');\n        const hardPieces = w.match(re) || [];\n        parts.push(...hardPieces);\n      }\n      if (wBuf) parts.push(wBuf);\n    }\n    if (sBuf) parts.push(sBuf);\n  }\n  if (buffer) parts.push(buffer);\n\n  // Final safety pass: trim chunks that might still exceed MAX_TELEGRAM\n  return parts.flatMap(part => {\n    if (part.length <= MAX_TELEGRAM) return [part];\n    const re = new RegExp(`.{1,${SAFE_BUDGET}}`, 'g');\n    return part.match(re) || [];\n  });\n}\n\n// ============ Main ============\nconst inputItems = $input.all();\nconst out = [];\n\nfor (const item of inputItems) {\n  const j = item.json || {};\n  const raw =\n    j.message ?? j.output ?? j.text ?? j.content ?? '';\n\n  const formatted = processMarkdownV2Safe(raw);\n  const chunks = chunkForTelegram(formatted, SAFE_BUDGET);\n\n  chunks.forEach((chunk, idx) => {\n    out.push({\n      json: {\n        ...j,\n        message: chunk,\n        message_part_index: idx + 1,\n        message_parts_total: chunks.length,\n      },\n      binary: item.binary,\n    });\n  });\n}\n\nreturn out;\n"
      },
      "id": "0f88646a-5e6e-4fb2-b2d3-75931746b3d1",
      "name": "MarkdownV2",
      "type": "n8n-nodes-base.code",
      "position": [
        2640,
        16
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "id": "93066f35-ee96-4a09-b60e-ff520b7fcd5b",
      "name": "Send a text message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        2864,
        16
      ],
      "webhookId": "1ad49e91-7894-4fb1-ba93-73ba3ec4e666",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "FYXmO1xALdoIYGZ3",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendChatAction",
        "chatId": "={{ $json.message.chat.id }}"
      },
      "id": "eaedba0d-88ba-4be5-8626-ef92ea0b6bcc",
      "name": "Typing…",
      "type": "n8n-nodes-base.telegram",
      "position": [
        544,
        -224
      ],
      "webhookId": "b768e407-5f22-4b80-a8a9-2d255b9bf815",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "FYXmO1xALdoIYGZ3",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
              "name": "message",
              "type": "string",
              "value": "=Voice message description:{{ $json.candidates?.[0]?.content?.parts?.[0]?.text || $json.content?.parts?.[0]?.text }}"
            },
            {
              "id": "93f1bba1-1180-404a-93ca-c34cf1d1b7ac",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5fc689be-902f-4266-a46b-2986f6ce234a",
      "name": "get_message (Audio/Video message)",
      "type": "n8n-nodes-base.set",
      "position": [
        992,
        384
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "models/gemini-2.5-pro",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "inputType": "binary",
        "options": {}
      },
      "id": "635ed86b-ce3c-451b-892a-80f789f0b28f",
      "name": "Analyze voice message",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "position": [
        768,
        384
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "j20KOsiE2TUYNeTR",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "801ec600-22ad-4a94-a2b4-ae72eb271df0",
              "name": "message",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.text }}"
            },
            {
              "id": "263071fb-bcdf-42b0-bb46-71b75fa0bf2a",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "64321564-7f4b-4110-bf9a-cefe5bc6b5f6",
      "name": "get_message (text)",
      "type": "n8n-nodes-base.set",
      "position": [
        992,
        192
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "fcb767ee-565e-4b56-a54e-6f97f739fc24",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.text }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "c1016c40-f8f2-4e08-8ec8-5cdb88f5c87a",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.voice }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Voice Message"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "ignoreCase": false,
          "allMatchingOutputs": true
        }
      },
      "id": "d757683b-84c6-4776-918a-0dcefdf2838a",
      "name": "Input Message Router1",
      "type": "n8n-nodes-base.switch",
      "position": [
        320,
        288
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Telegram Trigger').item.json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "1dad4bea-8ca2-4a7e-8425-71dd952cf79e",
      "name": "Download Voice Message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        544,
        384
      ],
      "webhookId": "d28e2f59-d662-4e75-8bac-11fdc3fbb295",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "FYXmO1xALdoIYGZ3",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "download": false
        }
      },
      "id": "c2f10586-8bf9-4581-8ab7-3d76e50ce151",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        96,
        32
      ],
      "webhookId": "1aecee74-ba0f-4fe2-a302-578312187154",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "FYXmO1xALdoIYGZ3",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "Y6uBXrtNCR9EuhIH",
        "options": {}
      },
      "id": "0b55c686-11cc-490d-8dc1-bf3193f895eb",
      "name": "Normalize input",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1216,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
              "name": "message",
              "type": "string",
              "value": "=It was not possible to process the file.File type not supported."
            },
            {
              "id": "38ba2498-2141-4a04-a22a-64563fe2ee6f",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "168e351b-c3ee-4588-ac33-c3fae22f552f",
      "name": "get_error_message",
      "type": "n8n-nodes-base.set",
      "position": [
        992,
        576
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=История клиента:\n{{ $('Normalize input1').item.json.context }}\nНовое сообщение клиента:\n{{ $('Normalize input').item.json.message }}",
        "options": {
          "systemMessage": "=Вы — Максим, эксперт Monster (monstr.agency).  \nПишите короткими живыми фразами, но при необходимости разворачивайте мысль.  \nТон деловой и уважительный, всегда на «вы», но допускается лёгкий юмор и эмодзи 🙂.  \nИспользуйте историю переписки и настроение клиента.  \nЗамечайте шутки, иронию и играйте в них: поддержите или уточните.  \nИзбегайте шаблонных клише («добрый день», «приятно познакомиться»).  \nСтиль ближе к живому человеку: простые слова, вариативность формулировок.  \nЗадавайте уточняющие вопросы, чтобы глубже понять задачу.  \nЦель — доверительный диалог, выявление задач клиента и мягкое продвижение.",
          "returnIntermediateSteps": true,
          "passthroughBinaryImages": true,
          "batching": {
            "batchSize": 1
          }
        }
      },
      "id": "eb39ce87-d342-4997-929c-ed5761f87846",
      "name": "Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1808,
        -128
      ],
      "typeVersion": 2.1,
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "description": "Вся информация о компании",
        "topK": 5
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1.1,
      "position": [
        1792,
        96
      ],
      "id": "161e6d05-bcc5-4508-88a9-b1935ccc170c",
      "name": "Answer questions with a vector store"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1984,
        304
      ],
      "id": "afda078e-23d8-450a-830d-9ae4a1d57b8e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "j20KOsiE2TUYNeTR",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "memoryKey": {
          "__rl": true,
          "mode": "list",
          "value": "vector_store_key"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
      "typeVersion": 1.2,
      "position": [
        1696,
        304
      ],
      "id": "816265f2-cb12-4fc1-a2cd-91a9529fbe95",
      "name": "Query Data Tool"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1776,
        512
      ],
      "id": "6da920fc-8cd6-45bf-b0e6-f8fd24bf3815",
      "name": "Embeddings Google Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "j20KOsiE2TUYNeTR",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1664,
        96
      ],
      "id": "f4886f72-a3e0-473e-abd9-034b61e94742",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "cYXfYtnOmdygmbZM",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "getUserContext",
        "threadId": "=m_{{ $('Telegram Trigger').item.json.message.chat.id }}",
        "minRating": 0.8
      },
      "type": "n8n-nodes-zep.zep",
      "typeVersion": 1,
      "position": [
        768,
        -224
      ],
      "id": "18bd49b4-08ee-49ce-baa4-2e54c0463d4b",
      "name": "Get user context from thread",
      "alwaysOutputData": true,
      "credentials": {
        "zepApi": {
          "id": "oNCTCKQnYJtOxVpA",
          "name": "Zep Api account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://data.widgets.d-novation.com/api/webhook/32485122/e34b6f2a5f370f8027c21b729b4f25d2cd75c40cd8dc7eb2d486b659f528a587",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "CONTEXT",
              "value": "={{ $json.messages }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2864,
        320
      ],
      "id": "034c0f13-e703-4d09-84a5-17da0804959c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1440,
        -144
      ],
      "id": "4c403efe-8ed4-44e3-8011-5175e8770589",
      "name": "Merge"
    },
    {
      "parameters": {
        "workflowId": "Y6uBXrtNCR9EuhIH",
        "options": {}
      },
      "id": "a4e1f88e-d8bd-4f1b-830b-50ef328bf230",
      "name": "Normalize input1",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1216,
        -144
      ],
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "addMessages",
        "threadId": "=m_{{ $('Normalize input').item.json.chat_id }}",
        "messages": {
          "messageValues": [
            {
              "role": "=user",
              "content": "={{ $('Normalize input').item.json.message }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-zep.zep",
      "typeVersion": 1,
      "position": [
        2352,
        320
      ],
      "id": "5c0f1ee5-2237-4572-9727-02c4111b0a3e",
      "name": "Add messages to thread",
      "credentials": {
        "zepApi": {
          "id": "oNCTCKQnYJtOxVpA",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "73e0be10-540e-43bb-8b17-9b9ceb5c221b",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        992,
        -640
      ],
      "id": "8595a8bc-6918-4813-a77d-7a7e7e13956f",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1872,
        -640
      ],
      "id": "37a82a3d-6794-48cf-9e48-569855a339c8",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        2352,
        -640
      ],
      "id": "f3ea233f-646a-48d5-a14e-28adf0b2db06"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "create",
        "userId": "=m_{{ $('Telegram Trigger').item.json.message.chat.id }}",
        "threadId": "=m_{{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "n8n-nodes-zep.zep",
      "typeVersion": 1,
      "position": [
        1440,
        -640
      ],
      "id": "1e3fd30b-b282-4e71-aaee-e7875e7356e7",
      "name": "Create a thread",
      "credentials": {
        "zepApi": {
          "id": "oNCTCKQnYJtOxVpA",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "getMessages",
        "threadId": "=m_{{ $('Normalize input').item.json.chat_id }}",
        "limit": 1
      },
      "type": "n8n-nodes-zep.zep",
      "typeVersion": 1,
      "position": [
        2640,
        320
      ],
      "id": "4982b6b1-9ae2-41cb-9b4d-724ee1898189",
      "name": "Get thread messages",
      "credentials": {
        "zepApi": {
          "id": "oNCTCKQnYJtOxVpA",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendChatAction",
        "chatId": "={{ $('Normalize input').item.json.chat_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2352,
        -288
      ],
      "id": "8b5c6b8f-2830-4fc8-a4fa-ae15e98c649a",
      "name": "Send a chat action",
      "webhookId": "5b6f8295-b7fc-442e-9219-00b962a5cdf6",
      "credentials": {
        "telegramApi": {
          "id": "GJDbtkEG41MLPOQh",
          "name": "Финбот"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "userId": "=m_{{ $('Telegram Trigger').item.json.message.chat.id}}"
      },
      "type": "n8n-nodes-zep.zep",
      "typeVersion": 1,
      "position": [
        1216,
        -640
      ],
      "id": "bc9ca490-c896-42ef-93c5-d1912afddf6e",
      "name": "Add a user",
      "alwaysOutputData": true,
      "credentials": {
        "zepApi": {
          "id": "oNCTCKQnYJtOxVpA",
          "name": "Zep Api account"
        }
      },
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "Agent": {
      "main": [
        [
          {
            "node": "Add messages to thread",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a chat action",
            "type": "main",
            "index": 0
          },
          {
            "node": "MarkdownV2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MarkdownV2": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize input": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Input Message Router1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Typing…",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_error_message": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_message (text)": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze voice message": {
      "main": [
        [
          {
            "node": "get_message (Audio/Video message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Message Router1": {
      "main": [
        [
          {
            "node": "get_message (text)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download Voice Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_error_message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Voice Message": {
      "main": [
        [
          {
            "node": "Analyze voice message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_message (Audio/Video message)": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer questions with a vector store": {
      "ai_tool": [
        [
          {
            "node": "Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Answer questions with a vector store",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Query Data Tool": {
      "ai_vectorStore": [
        [
          {
            "node": "Answer questions with a vector store",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "Query Data Tool",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get user context from thread": {
      "main": [
        [
          {
            "node": "Normalize input1",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Typing…": {
      "main": [
        [
          {
            "node": "Get user context from thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize input1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add messages to thread": {
      "main": [
        [
          {
            "node": "Get thread messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Add a user",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Normalize input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Get user context from thread",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a thread": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get thread messages": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a chat action": {
      "main": [
        []
      ]
    },
    "Add a user": {
      "main": [
        [
          {
            "node": "Create a thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "triggerCount": 1,
  "versionId": "80d045fb-51f5-4143-b0d1-90ccf4b352f6",
  "owner": {
    "type": "personal",
    "projectId": "XVIvSprAE1aEnKPy",
    "projectName": "monster devz <monscorpdevz@gmail.com>",
    "personalEmail": "monscorpdevz@gmail.com"
  },
  "parentFolderId": null,
  "isArchived": false
}
